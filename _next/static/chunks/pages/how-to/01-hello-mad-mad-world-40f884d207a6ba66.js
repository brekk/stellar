(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[141],{5646:function(e,s,l){(window.__NEXT_P=window.__NEXT_P||[]).push(["/how-to/01-hello-mad-mad-world",function(){return l(8779)}])},8779:function(e,s,l){"use strict";l.r(s),l.d(s,{COMPONENT:function(){return o},DATA:function(){return t},NAME:function(){return r}});var i=l(5893),a=l(2916),n=l.n(a);let r="01-hello-mad-mad-world",t={tags:["fundamentals","literals","logic","guide"]},o=()=>{let e=n()(r);return(0,i.jsxs)("article",{className:e(""),children:[(0,i.jsx)("h2",{children:"Installation"}),(0,i.jsxs)("p",{children:["There are a few ways to"," ",(0,i.jsx)("a",{href:"/installation",title:"install Madlib",children:"install Madlib"}),", but the easiest is to install it via"," ",(0,i.jsx)("a",{href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm",children:"npm"}),"."]}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-sh",children:"npm i @madlib-lang/madlib -g"})}),(0,i.jsxs)("p",{children:["This should make the ",(0,i.jsx)("code",{children:"madlib"})," binary globally accessible, so you should see a version number when you run"," ",(0,i.jsx)("code",{children:"madlib --version"}),":"]}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-sh",children:"> madlib --version madlib@0.23.13"})}),(0,i.jsx)("h2",{children:"REPL"}),(0,i.jsx)("p",{children:"For lightweight or exploratory work, you can work within the Madlib REPL (Read-Eval-Print-Loop). This is a sandbox where you can write code as you learn more about Madlib."}),(0,i.jsxs)("p",{children:["The REPL can be accessed with the command ",(0,i.jsx)("code",{children:"madlib repl"}),", which should bring up an interactive session that looks like this:"]}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{children:"------ REPL - Madlib@0.23.13 ------------------------------- Available commands: :help show help (alias :h) :exit exit the REPL (alias :e) :multi start multiline mode (alias :m) :type NAME show the type of an assignment (alias :t) :reset reset the state of the repl (alias :r) ----------------------------------------------------------- >"})}),(0,i.jsxs)("p",{children:["Here are some simple expressions you can start to play with in the REPL before we set up a more serious"," ",(0,i.jsx)("a",{href:"/05-the-march-of-ides",title:"programming environment",children:"programming environment"}),"."]}),(0,i.jsx)("h3",{children:"Basic arithmetic"}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-mad",children:"> 5 + 5 10 :: Integer > 10 - 100 -90 :: Integer > 42 * 10 420 :: Integer > 9 / 6 1.5 :: Float"})}),(0,i.jsxs)("p",{children:["As you can see, we're not doing anything complex here â€” but this illustrates the way we can write an expression and see the result, along with its type. The type is indicated by the double-colon /"," ",(0,i.jsx)("code",{children:"::"}),' , which can be read as "has type of".']}),(0,i.jsx)("p",{children:"These follow the usual precedence rules, and can be changed by adding parentheses:"}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-mad",children:"> 3 * 4 / (5 - 6) -12 :: Float > 3 * 4 / 5 - 6 -3.6 :: Float > 3 * (4 / 5) - 6 -3.5999999999999996 :: Float"})}),(0,i.jsx)("h2",{children:"Basic boolean logic"}),(0,i.jsx)("p",{children:"Here are some simple boolean expressions."}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-mad",children:"> true && false false :: Boolean > true && true true :: Boolean > false || true true :: Boolean > !(false && false) true :: Boolean"})}),(0,i.jsxs)("p",{children:["As you can see, we have the literals ",(0,i.jsx)("code",{children:"true"})," and"," ",(0,i.jsx)("code",{children:"false"}),", as well as the logical ",(0,i.jsx)("em",{children:"and"})," (",(0,i.jsx)("code",{children:"&&"}),") and logical ",(0,i.jsx)("em",{children:"or"})," (",(0,i.jsx)("code",{children:"||"}),") operators. Finally, we have a boolean negation operator (",(0,i.jsx)("code",{children:"!"}),") which is infixed."]}),(0,i.jsx)("h2",{children:"Asserting equality"}),(0,i.jsx)("p",{children:"Here we can assert the equality of things:"}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-mad",children:'> 5 == 5 true :: Boolean > 1 == 0 false :: Boolean > 7 != 0 true :: Boolean > "hello" == "world" false :: Boolean'})}),(0,i.jsxs)("p",{children:["Here we've shown the equality operator ( ",(0,i.jsx)("code",{children:"=="}),") as well as the inequality operator (",(0,i.jsx)("code",{children:"!="}),")."]}),(0,i.jsx)("h2",{children:"Try mixing types"}),(0,i.jsxs)("p",{children:["What happens if we try to do something like add ",(0,i.jsx)("code",{children:'5 + "cool"'}),"?"]}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-mad",children:"> 5 + \"cool\" Instance not found No instance for 'Number String' was found. Hint: Verify that you imported the module where the Number instance for 'String' is defined Note: Remember that instance methods are automatically imported when the module is imported, directly, or indirectly."})}),(0,i.jsx)("p",{children:"Here Madlib is saying that \"cool\" is not a number and so it doesn't know how to add 5 to it. We'll discuss this kind of error more later on."}),(0,i.jsx)("h2",{children:"Import functions from Prelude"}),(0,i.jsxs)("p",{children:["In Madlib, we call our standard library ",(0,i.jsx)("em",{children:"Prelude"})," (a name taken from Haskell). We'll go over everything it has to offer in more detail shortly, but let's start by importing ",(0,i.jsx)("code",{children:"Math"}),":"]}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-mad",children:'> import Math from "Math"'})}),(0,i.jsxs)("p",{children:[(0,i.jsx)("a",{href:"https://github.com/madlib-lang/madlib/blob/master/prelude/__internal__/Math.mad",children:"Math"})," ","has a few functions we can play with. We won't go over everything here, just enough to give a general sense of how it works."]}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-mad",children:'> import Math from "Math" > Math.max(100, 20) 100 :: Integer > Math.min(100, 20) 20 :: Integer > x = Math.divide(3, 4) 0.75 :: Float > y = Math.sqrt(100) 10 :: Float > z = Math.abs(-1000) 1000 :: Integer > x 0.75 :: Float'})}),(0,i.jsxs)("p",{children:["As you can see, functions are invoked by passing them parameters within parentheses. We've also assigned some of these results to variables (",(0,i.jsx)("code",{children:"x"}),", ",(0,i.jsx)("code",{children:"y"}),", ",(0,i.jsx)("code",{children:"z"}),") and we've shown that the REPL will remember these values in memory."]}),(0,i.jsxs)("p",{children:["We'll also try playing with a few of the functions defined in"," ",(0,i.jsx)("a",{href:"https://github.com/madlib-lang/madlib/blob/master/prelude/__internal__/List.mad",children:"List"}),". Again, this isn't comprehensive but will give a sense of how they work:"]}),(0,i.jsx)("pre",{children:(0,i.jsx)("code",{className:"language-mad",children:'> import List from "List" > List.range(0, 10) [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] :: List Integer > nums = [1,2,3,4,500,7,92,30] > List.reduce(Math.max, -1, nums) 500 :: Integer > List.reduce((a, b) => a + b, 0, nums) 639 :: Integer'})}),(0,i.jsx)("h5",{children:"Summary"}),(0,i.jsx)("p",{children:"In this document, we've discussed:"}),(0,i.jsxs)("ul",{children:[(0,i.jsx)("li",{children:(0,i.jsxs)("p",{children:[(0,i.jsx)("a",{href:"/01-hello-mad-mad-world#installation",title:"Installing",children:"Installing"})," ","Madlib"]})}),(0,i.jsx)("li",{children:(0,i.jsxs)("p",{children:["Using the"," ",(0,i.jsx)("a",{href:"/01-hello-mad-mad-world#repl",title:"REPL",children:"REPL"})]})}),(0,i.jsx)("li",{children:(0,i.jsxs)("p",{children:["Basic"," ",(0,i.jsx)("a",{href:"/01-hello-mad-mad-world#basic-arithmetic",title:"arithmetic",children:"arithmetic"})]})}),(0,i.jsx)("li",{children:(0,i.jsx)("p",{children:(0,i.jsx)("a",{href:"/01-hello-mad-mad-world#basic-boolean-logic",title:"Boolean logic",children:"Boolean logic"})})}),(0,i.jsx)("li",{children:(0,i.jsx)("p",{children:(0,i.jsx)("a",{href:"/01-hello-mad-mad-world#asserting-equality",title:"Expressions of equality",children:"Expressions of equality"})})}),(0,i.jsx)("li",{children:(0,i.jsxs)("p",{children:[(0,i.jsx)("a",{href:"/01-hello-mad-mad-world",title:"Importing",children:"Importing"})," ","and invoking functions from Prelude"]})})]})]})};s.default=o}},function(e){e.O(0,[888,774,179],function(){return e(e.s=5646)}),_N_E=e.O()}]);