(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[141],{5646:function(e,a,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/how-to/01-hello-mad-mad-world",function(){return n(8779)}])},8779:function(e,a,n){"use strict";n.r(a),n.d(a,{COMPONENT:function(){return o},DATA:function(){return t},NAME:function(){return r}});var s=n(5893),l=n(2916),i=n.n(l);let r="01-hello-mad-mad-world",t={tags:["fundamentals","literals","logic","guide"]},o=()=>{let e=i()("HowToGuide");return(0,s.jsxs)("article",{className:e(""),children:[(0,s.jsx)("h1",{children:"01 - Hello mad, mad world"}),(0,s.jsx)("h2",{children:"Installation"}),(0,s.jsxs)("p",{children:["There are a few ways to"," ",(0,s.jsx)("a",{className:"internal",href:"/Reference/Installation",children:"install Madlib"}),", but the easiest is to install it via"," ",(0,s.jsx)("a",{href:"https://docs.npmjs.com/downloading-and-installing-node-js-and-npm",children:"npm"}),"."]}),(0,s.jsx)("pre",{className:e("language","sh"),"data-lang":"sh",children:(0,s.jsx)("code",{className:"language-sh",children:"npm i @madlib-lang/madlib -g\n"})}),(0,s.jsxs)("p",{children:["This should make the ",(0,s.jsx)("code",{children:"madlib"})," binary globally accessible, so you should see a version number when you run"," ",(0,s.jsx)("code",{children:"madlib --version"}),":"]}),(0,s.jsx)("pre",{className:e("language","sh"),"data-lang":"sh",children:(0,s.jsx)("code",{className:"language-sh",children:"> madlib --version\nmadlib@0.23.13\n"})}),(0,s.jsx)("h2",{children:"REPL"}),(0,s.jsx)("p",{children:"For lightweight or exploratory work, you can work within the Madlib REPL (Read-Eval-Print-Loop). This is a sandbox where you can write code as you learn more about Madlib."}),(0,s.jsxs)("p",{children:["The REPL can be accessed with the command ",(0,s.jsx)("code",{children:"madlib repl"}),", which should bring up an interactive session that looks like this:"]}),(0,s.jsx)("pre",{className:e("language","none"),children:(0,s.jsx)("code",{children:"------ REPL - Madlib@0.23.13 -------------------------------\nAvailable commands:\n  :help           show help (alias :h)\n  :exit           exit the REPL (alias :e)\n  :multi          start multiline mode (alias :m)\n  :type NAME      show the type of an assignment (alias :t)\n  :reset          reset the state of the repl (alias :r)\n-----------------------------------------------------------\n\n>\n"})}),(0,s.jsxs)("p",{children:["Here are some simple expressions you can start to play with in the REPL before we set up a more serious"," ",(0,s.jsx)("a",{className:"internal",href:"/How-To Guides/05 - The March of IDEs",children:"programming environment"}),"."]}),(0,s.jsx)("h3",{children:"Basic arithmetic"}),(0,s.jsx)("pre",{className:e("language","mad"),"data-lang":"mad",children:(0,s.jsx)("code",{className:"language-mad",children:"> 5 + 5\n10 :: Integer\n> 10 - 100\n-90 :: Integer\n> 42 * 10\n420 :: Integer\n> 9 / 6\n1.5 :: Float\n"})}),(0,s.jsxs)("p",{children:["As you can see, we're not doing anything complex here â€” but this illustrates the way we can write an expression and see the result, along with its type. The type is indicated by the double-colon /"," ",(0,s.jsx)("code",{children:"::"}),' , which can be read as "has type of".']}),(0,s.jsx)("p",{children:"These follow the usual precedence rules, and can be changed by adding parentheses:"}),(0,s.jsx)("pre",{className:e("language","mad"),"data-lang":"mad",children:(0,s.jsx)("code",{className:"language-mad",children:"> 3 * 4 / (5 - 6)\n-12 :: Float\n> 3 * 4 / 5 - 6\n-3.6 :: Float\n> 3 * (4 / 5) - 6\n-3.5999999999999996 :: Float\n"})}),(0,s.jsx)("h2",{children:"Basic boolean logic"}),(0,s.jsx)("p",{children:"Here are some simple boolean expressions."}),(0,s.jsx)("pre",{className:e("language","mad"),"data-lang":"mad",children:(0,s.jsx)("code",{className:"language-mad",children:"> true == false\nfalse :: Boolean\n> true == true\ntrue :: Boolean\n> false || true\ntrue :: Boolean\n> !(false == false)\ntrue :: Boolean\n"})}),(0,s.jsxs)("p",{children:["As you can see, we have the literals ",(0,s.jsx)("code",{children:"true"})," and"," ",(0,s.jsx)("code",{children:"false"}),", as well as the logical ",(0,s.jsx)("em",{children:"and"})," (",(0,s.jsx)("code",{children:"=="}),") and logical ",(0,s.jsx)("em",{children:"or"})," (",(0,s.jsx)("code",{children:"||"}),") operators. Finally, we have a boolean negation operator (",(0,s.jsx)("code",{children:"!"}),") which is infixed."]}),(0,s.jsx)("h2",{children:"Asserting equality"}),(0,s.jsx)("p",{children:"Here we can assert the equality of things:"}),(0,s.jsx)("pre",{className:e("language","mad"),"data-lang":"mad",children:(0,s.jsx)("code",{className:"language-mad",children:'> 5 == 5\ntrue :: Boolean\n> 1 == 0\nfalse :: Boolean\n> 7 != 0\ntrue :: Boolean\n> "hello" == "world"\nfalse :: Boolean\n'})}),(0,s.jsxs)("p",{children:["Here we've shown the equality operator ( ",(0,s.jsx)("code",{children:"=="}),") as well as the inequality operator (",(0,s.jsx)("code",{children:"!="}),")."]}),(0,s.jsx)("h2",{children:"Try mixing types"}),(0,s.jsxs)("p",{children:["What happens if we try to do something like add ",(0,s.jsx)("code",{children:'5 + "cool"'}),"?"]}),(0,s.jsx)("pre",{className:e("language","mad"),"data-lang":"mad",children:(0,s.jsx)("code",{className:"language-mad",children:"> 5 + \"cool\"\nInstance not found\n\nNo instance for 'Number String' was found.\n\nHint: Verify that you imported the module where the Number\ninstance for 'String' is defined\nNote: Remember that instance methods are automatically imported when the module is imported, directly, or indirectly.\n"})}),(0,s.jsx)("p",{children:"Here Madlib is saying that \"cool\" is not a number and so it doesn't know how to add 5 to it. We'll discuss this kind of error more later on."}),(0,s.jsx)("h2",{children:"Import functions from Prelude"}),(0,s.jsxs)("p",{children:["In Madlib, we call our standard library ",(0,s.jsx)("em",{children:"Prelude"})," (a name taken from Haskell). We'll go over everything it has to offer in more detail shortly, but let's start by importing ",(0,s.jsx)("code",{children:"Math"}),":"]}),(0,s.jsx)("pre",{className:e("language","mad"),"data-lang":"mad",children:(0,s.jsx)("code",{className:"language-mad",children:'> import Math from "Math"\n'})}),(0,s.jsxs)("p",{children:[(0,s.jsx)("a",{href:"https://github.com/madlib-lang/madlib/blob/master/prelude/__internal__/Math.mad",children:"Math"})," ","has a few functions we can play with. We won't go over everything here, just enough to give a general sense of how it works."]}),(0,s.jsx)("pre",{className:e("language","mad"),"data-lang":"mad",children:(0,s.jsx)("code",{className:"language-mad",children:'> import Math from "Math"\n> Math.max(100, 20)\n100 :: Integer\n> Math.min(100, 20)\n20 :: Integer\n> x = Math.divide(3, 4)\n0.75 :: Float\n> y = Math.sqrt(100)\n10 :: Float\n> z = Math.abs(-1000)\n1000 :: Integer\n> x\n0.75 :: Float\n'})}),(0,s.jsxs)("p",{children:["As you can see, functions are invoked by passing them parameters within parentheses. We've also assigned some of these results to variables (",(0,s.jsx)("code",{children:"x"}),", ",(0,s.jsx)("code",{children:"y"}),", ",(0,s.jsx)("code",{children:"z"}),") and we've shown that the REPL will remember these values in memory."]}),(0,s.jsxs)("p",{children:["We'll also try playing with a few of the functions defined in"," ",(0,s.jsx)("a",{href:"https://github.com/madlib-lang/madlib/blob/master/prelude/__internal__/List.mad",children:"List"}),". Again, this isn't comprehensive but will give a sense of how they work:"]}),(0,s.jsx)("pre",{className:e("language","mad"),"data-lang":"mad",children:(0,s.jsx)("code",{className:"language-mad",children:'> import List from "List"\n> List.range(0, 10)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] :: List Integer\n> nums = [1,2,3,4,500,7,92,30]\n> List.reduce(Math.max, -1, nums)\n500 :: Integer\n> List.reduce((a, b) => a + b, 0, nums)\n639 :: Integer\n'})}),(0,s.jsx)("h5",{children:"Summary"}),(0,s.jsx)("p",{children:"In this document, we've discussed:"}),(0,s.jsxs)("ul",{children:[(0,s.jsxs)("li",{children:[(0,s.jsx)("a",{className:"internal",href:"/How-To Guides/01 - Hello mad, mad world#installation",children:"Installing"})," ","Madlib"]}),(0,s.jsxs)("li",{children:["Using the"," ",(0,s.jsx)("a",{className:"internal",href:"/How-To Guides/01 - Hello mad, mad world#repl",children:"REPL"})]}),(0,s.jsxs)("li",{children:["Basic"," ",(0,s.jsx)("a",{className:"internal",href:"/How-To Guides/01 - Hello mad, mad world#basic-arithmetic",children:"arithmetic"})]}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{className:"internal",href:"/How-To Guides/01 - Hello mad, mad world#basic-boolean-logic",children:"Boolean logic"})}),(0,s.jsx)("li",{children:(0,s.jsx)("a",{className:"internal",href:"/How-To Guides/01 - Hello mad, mad world#asserting-equality",children:"Expressions of equality"})}),(0,s.jsxs)("li",{children:[(0,s.jsx)("a",{className:"internal",href:"/How-To Guides/01 - Hello mad, mad world",children:"Importing"})," ","and invoking functions from Prelude"]})]})]})};a.default=o}},function(e){e.O(0,[888,774,179],function(){return e(e.s=5646)}),_N_E=e.O()}]);