(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[474],{2838:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/how-to/02-syntactic-tactics",function(){return s(5286)}])},1819:function(e,n,s){"use strict";s.d(n,{Z:function(){return m}});var i,a=s(5893),t=s(2916),r=s.n(t);function c(e){return null!=e&&"object"==typeof e&&!0===e["@@functional/placeholder"]}function l(e){return function n(s){return 0==arguments.length||c(s)?n:e.apply(this,arguments)}}function o(e,n){switch(e){case 0:return function(){return n.apply(this,arguments)};case 1:return function(e){return n.apply(this,arguments)};case 2:return function(e,s){return n.apply(this,arguments)};case 3:return function(e,s,i){return n.apply(this,arguments)};case 4:return function(e,s,i,a){return n.apply(this,arguments)};case 5:return function(e,s,i,a,t){return n.apply(this,arguments)};case 6:return function(e,s,i,a,t,r){return n.apply(this,arguments)};case 7:return function(e,s,i,a,t,r,c){return n.apply(this,arguments)};case 8:return function(e,s,i,a,t,r,c,l){return n.apply(this,arguments)};case 9:return function(e,s,i,a,t,r,c,l,o){return n.apply(this,arguments)};case 10:return function(e,s,i,a,t,r,c,l,o,d){return n.apply(this,arguments)};default:throw Error("First argument to _arity must be a non-negative integer no greater than ten")}}var d=(i=function(e,n){return 1===e?l(n):o(e,function e(n,s,i){return function(){for(var a,t=[],r=0,l=n,d=0,h=!1;d<s.length||r<arguments.length;)d<s.length&&(!c(s[d])||r>=arguments.length)?a=s[d]:(a=arguments[r],r+=1),t[d]=a,c(a)?h=!0:l-=1,d+=1;return!h&&l<=0?i.apply(this,t):o(Math.max(0,l),e(n,t,i))}}(e,[],n))},function e(n,s){switch(arguments.length){case 0:return e;case 1:return c(n)?e:l(function(e){return i(n,e)});default:return c(n)&&c(s)?e:c(n)?l(function(e){return i(e,s)}):c(s)?l(function(e){return i(n,e)}):i(n,s)}}),h=l(function(e){return d(e.length,e)});s(7613);let u=h((e,n)=>((n||"").match(e)||[]).length)(/\n/g);var m=e=>{let{caption:n,inline:s=!1,children:i,language:t}=e,c=r()("Code"),l=u(i),o=i.split(/\n/g).map(e=>e.trim().length).reduce((e,n)=>n>e?n:e,0);return s?(0,a.jsx)("code",{className:c("inline"),children:i}):(0,a.jsxs)("figure",{"data-width":o,"data-lines":l,className:c("",[t,"width-".concat(o<20?"narrow":o>60?"wide":"median"),"lines-".concat(l<2?"small":l>10?"large":"medium")]),children:[(0,a.jsx)("figcaption",{className:c("caption"),children:n}),(0,a.jsxs)("div",{className:c("content"),children:["none"!==t?(0,a.jsx)("div",{className:c("language-meta"),children:t}):null,(0,a.jsx)("pre",{className:c("language",t),children:(0,a.jsx)("code",{className:c("language-content",t),children:i})})]})]})}},5286:function(e,n,s){"use strict";s.r(n),s.d(n,{COMPONENT:function(){return o},DATA:function(){return l},NAME:function(){return c}});var i=s(5893),a=s(2916),t=s.n(a),r=s(1819);let c="02-syntactic-tactics",l={tags:["guide"]},o=()=>{let e=t()("HowToGuide");return(0,i.jsxs)("article",{className:e(""),children:[(0,i.jsxs)("h1",{className:e("header","main"),children:[(0,i.jsx)("div",{className:e("title"),children:"Syntactic Tactics"}),(0,i.jsx)("div",{className:e("index","ordinal"),children:"02"})]}),(0,i.jsx)("p",{children:"In the last guide we went over the core of writing functions in Madlib. In this guide we’ll be going over common syntactic affordances."}),(0,i.jsx)("h2",{className:e("header","section"),children:"Comments"}),(0,i.jsxs)("p",{children:["Madlib has C-style comments which start with two slashes: (",(0,i.jsx)("code",{className:e("code","inline"),children:"//"}),") for single-lines or wrapped with (",(0,i.jsx)("code",{className:e("code","inline"),children:"/*"})," …"," ",(0,i.jsx)("code",{className:e("code","inline"),children:"*/"})," ) for multi-line comments."]}),(0,i.jsx)(r.Z,{language:"mad",children:"// this is a comment\n/*\nThis is a\nMultiline\nComment\n*/\n"}),(0,i.jsx)("h3",{className:e("header","subsection"),children:"Documentation comments"}),(0,i.jsxs)("p",{children:["Additionally there is a special format for creating comments which can be automatically parsed and turned into structured JSON — and a"," ",(0,i.jsx)("a",{href:"https://github.com/madlib-lang/maddoc",children:"secondary tool"})," which can then turn this JSON into a website."]}),(0,i.jsx)(r.Z,{language:"mad",children:"/**\n * A function for division\n * @since 0.0.1\n * @example\n * third = div($, 3)\n */\ndiv :: Integer -> Integer -> Float\ndiv = (n, d) => n / d\n"}),(0,i.jsxs)("p",{children:["This is discussed more in"," ",(0,i.jsx)("a",{className:"internal",href:"/How-To Guides/06 - Developmental Growth",children:"a future guide"}),"."]}),(0,i.jsx)("h2",{className:e("header","section"),children:"Conditionals"}),(0,i.jsx)("p",{children:"Conditions are syntactically expressed in one of two ways in Madlib."}),(0,i.jsx)("h3",{className:e("header","subsection"),children:"Ternary Expressions"}),(0,i.jsx)("p",{children:"Ternary conditions can be written in the following way:"}),(0,i.jsx)(r.Z,{language:"mad",children:"x = 5\n// condition ? truthy case : falsy case\ny = x >= 0 ? “less than zero” : “greater than zero”\n"}),(0,i.jsx)("p",{children:"Note the way in which this is a logical expression. If we wanted to nest more cases, we could do so:"}),(0,i.jsx)(r.Z,{language:"mad",children:"y = x == 0 ? “is zero” : x &#x3C; 0 ? “less than zero” : “greater than zero”\n"}),(0,i.jsx)("h3",{className:e("header","subsection"),children:"if … else"}),(0,i.jsxs)("p",{children:["The other way of expressing conditions syntactically in Madlib is using the ",(0,i.jsx)("code",{className:e("code","inline"),children:"if"})," and"," ",(0,i.jsx)("code",{className:e("code","inline"),children:"else"})," keywords."]}),(0,i.jsx)("p",{children:"Unlike some other languages, this syntax is designed to be identical to ternary expressions: each branch has a single expression by default, has implicit returns and must be consistent in return type. Additionally, like ternary expressions, there is no means of short-circuiting."}),(0,i.jsxs)("p",{children:["Here’s the same example from above using"," ",(0,i.jsx)("code",{className:e("code","inline"),children:"if"})," /"," ",(0,i.jsx)("code",{className:e("code","inline"),children:"else"})," syntax:"]}),(0,i.jsx)(r.Z,{language:"mad",children:"x = 5\ny = if (x >= 0) {\n  “less than zero”\n} else {\n  “greater than zero”\n}\n"}),(0,i.jsxs)("p",{children:["Note the way in which this is also an expression and it is being assigned to ",(0,i.jsx)("code",{className:e("code","inline"),children:"y"}),"."]}),(0,i.jsx)("p",{children:"As constructed, we cannot add an additional expression to this."}),(0,i.jsxs)("p",{children:["If we wanted to add an additional expression, we’d need to add a"," ",(0,i.jsx)("a",{className:"internal",href:"/Reference/Do Notation",children:"do"})," ","keyword:"]}),(0,i.jsxs)("h4",{className:e("header","example"),children:["Using ",(0,i.jsx)("code",{className:e("code","inline"),children:"do"})," notation with conditionals"]}),(0,i.jsx)(r.Z,{language:"mad",children:"import IO from “IO”\nx = 5\ny = if (x >= 0) do {\n  IO.putLine(“happy path”)\n  return “less than zero”\n} else {\n  “greater than zero”\n}\n"}),(0,i.jsxs)("p",{children:["Note the way in which we’ve added both a"," ",(0,i.jsx)("code",{className:e("code","inline"),children:"do"})," and an explicit"," ",(0,i.jsx)("code",{className:e("code","inline"),children:"return"})," here. If the return is omitted, the compiler will infer that the return type of this expression is Unit /"," ",(0,i.jsx)("code",{className:e("code","inline"),children:"{}"}),". Without the"," ",(0,i.jsx)("code",{className:e("code","inline"),children:"do"}),", this is syntactically invalid because it’s not a single expression."]}),(0,i.jsxs)("h4",{className:e("header","example"),children:["Implicit ",(0,i.jsx)("code",{className:e("code","inline"),children:"else"})]}),(0,i.jsxs)("p",{children:["Given the behavior described above, the compiler will automatically add an ",(0,i.jsx)("code",{className:e("code","inline"),children:"else"})," clause when it is omitted. However, this else clause necessarily returns"," ",(0,i.jsx)("a",{className:"internal",href:"/Reference/Literals/Unit",children:"Unit"})," ","in order to be type consistent. Therefore it can be helpful to use"," ",(0,i.jsx)("code",{className:e("code","inline"),children:"do"})," notation to eschew an explicit return value when using"," ",(0,i.jsx)("code",{className:e("code","inline"),children:"if"})," clauses by themselves."]}),(0,i.jsx)("h2",{className:e("header","section"),children:"Modules"}),(0,i.jsxs)("p",{children:["Madlib allows segmentation of programs into separate files, called Modules. These are defined by usage of"," ",(0,i.jsx)("code",{className:e("code","inline"),children:"import"}),"s and"," ",(0,i.jsx)("code",{className:e("code","inline"),children:"export"}),"s."]}),(0,i.jsx)("h3",{className:e("header","subsection"),children:"Imports"}),(0,i.jsxs)("p",{children:["As we saw in the"," ",(0,i.jsx)("a",{className:"internal",href:"/How-To Guides/01 - Hello mad, mad world",children:"previous guide"}),", files can make use of"," ",(0,i.jsx)("code",{className:e("code","inline"),children:"import"})," syntax to pull in content from"," ",(0,i.jsx)("a",{className:"internal new",href:"Prelude",children:"Prelude"}),". They can also use the same syntax to pull in content from local modules or 3rd-party modules."]}),(0,i.jsx)(r.Z,{language:"mad",children:'import MyLocalModule from "./MyLocalModule"\n// or, direct access\nimport { method, variable } from "./MyLocalModule"\n'}),(0,i.jsx)("h3",{className:e("header","subsection"),children:"Exports"}),(0,i.jsx)("p",{children:"The example above would correspond to a local module like this:"}),(0,i.jsx)(r.Z,{language:"mad",children:"localvar = “this value is inaccessible outside of this file”\nexport variable = “this value is accessible elsewhere”\n\nmethod :: a -> a\nmethod = (x) => x\n"}),(0,i.jsxs)("p",{children:["We'll discuss more about"," ",(0,i.jsx)("a",{className:"internal",href:"/How-To Guides/03 - Just My Type",children:"defining functions"})," ","in the next guide."]}),(0,i.jsx)("h5",{className:e("header","summary"),children:"Summary"}),(0,i.jsx)("p",{children:"In this document, we've discussed:"}),(0,i.jsxs)("ul",{children:[(0,i.jsxs)("li",{children:["Annotating a Madlib program with"," ",(0,i.jsx)("a",{className:"internal",href:"/How-To Guides/02 - Syntactic Tactics#comments",children:"comments"})]}),(0,i.jsxs)("li",{children:["Defining branching logic with"," ",(0,i.jsx)("a",{className:"internal",href:"/How-To Guides/02 - Syntactic Tactics#conditionals",children:"conditionals"})]}),(0,i.jsxs)("li",{children:["Segmenting programs via modules, using"," ",(0,i.jsx)("a",{className:"internal",href:"/How-To Guides/02 - Syntactic Tactics#imports",children:"imports"})," ","and"," ",(0,i.jsx)("a",{className:"internal",href:"/How-To Guides/02 - Syntactic Tactics#exports",children:"exports"})]}),(0,i.jsxs)("li",{children:["Defining and running a"," ",(0,i.jsx)("code",{className:e("code","inline"),children:"main"})," function"]})]})]})};n.default=o},7613:function(){}},function(e){e.O(0,[888,774,179],function(){return e(e.s=2838)}),_N_E=e.O()}]);